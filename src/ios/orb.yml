version: 2.1

description: |
  Simplify common tasks for building and testing iOS projects

orbs:
  bundle-install: toshimaru/bundle-install@0.1.1

executors:
  default:
    macos:
      xcode: "10.1.0"

jobs:
  test:
    description: |
      Build and test an iOS project using xcodebuild

      Note: A Gemfile with 'cocoapods', 'cocoapods-check' and 'xcpretty' is required. 
    parameters:
      workspace:
        type: string
      scheme:
        type: string
      configuration:
        type: string
        default: Debug
      destination:
        type: string
        default: "platform=iOS Simulator,name=iPhone XS,OS=latest"
    executor: default
    steps:
      - checkout
      - cached-pod-install
      - run:
          name: Build
          command: |
            xcodebuild  -workspace "<< parameters.workspace >>" \
                        -scheme "<< parameters.scheme >>" \
                        -configuration "<< parameters.configuration >>" \
                        -destination '<< parameters.destination >>'\
                        -sdk iphonesimulator \
                        build-for-testing | bundle exec xcpretty
      - run:
          name: Test
          command: |
            xcodebuild  -workspace "<< parameters.workspace >>" \
                        -scheme "<< parameters.scheme >>" \
                        -configuration "<< parameters.configuration >>" \
                        -destination '<< parameters.destination >>'\
                        test-without-building | bundle exec xcpretty -r junit
      - store_test_results:
          path: build/reports
  validate-podspec:
    description: |
      Run 'pod spec lint' on a provided .podspec file.

      Note: A Gemfile with 'cocoapods' is required. 
    parameters:
      podspec-path:
        type: string
    executor: default
    steps:
      - checkout
      - bundle-install/bundle-install
      - run:
          name: Fetch CocoaPods Specs
          command: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Validate podspec
          command: bundle exec pod lib lint "<< parameters.podspec-path >>"

commands:
  cached-pod-install:
    description: |
      Install pods in the current project and cache the results.
      
      Note: A Gemfile with 'cocoapods' and 'cocoapods-check' is required. 
    steps:
      - restore_cache:
          keys:
            - pods-gems-cache-v1-{{ checksum "Gemfile.lock" }}-{{ checksum "Podfile.lock" }}
            - pods-gems-cache-v1-{{ checksum "Gemfile.lock" }}
            - pods-gems-cache-v1-
      - run:
          name: Bundle install
          command: bundle install --path=vendor/bundle
      - run:
          name: Check Podfile matches Podfile.lock
          command: |
            function lockfile_error () {
              echo "Podfile and Podfile.lock do not match. Please run 'bundle exec pod install' and try again."
            }
            trap lockfile_error ERR

            # This verifies that the PODFILE CHECKSUM in Podfile.lock matches Podfile
            PODFILE_SHA1=$(ruby -e "require 'yaml';puts YAML.load_file('Podfile.lock')['PODFILE CHECKSUM']")
            echo "$PODFILE_SHA1 *Podfile" | shasum -c
      - run:
          name: CocoaPods Check
          command: (bundle exec pod check && touch .skip_pod_install) || echo "Pods will be updated"
      - run:
          name: Fetch CocoaPods Specs (if needed)
          command: test -e .skip_pod_install || curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Pod Install (if needed)
          command: test -e .skip_pod_install || bundle exec pod install
          environment:
            COCOAPODS_DISABLE_STATS: true
      - save_cache:
          key: pods-gems-cache-v1-{{ checksum "Gemfile.lock" }}-{{ checksum "Podfile.lock" }}
          paths:
            - Pods/
            - vendor/bundle
